---
# - name: Protect .ssh
#   become: yes
#   file:
#     path: /home/{{ item }}/.ssh
#     attributes: -i
#   when: ssh_available.stat.exists

# - name: Protect authorized_keys
#   become: yes
#   file:
#     path: /home/{{ item }}/.ssh/authorized_keys
#     attributes: -i
#   when: authorized_keys_available.stat.exists


#
# mark key to be revoked for given user at given host
#

- name: "Ensure {{ pmaker_home }}/state/{{ user_group }}/{{ server_group }}/{{ item }}/.ssh/servers dir exists"
  file: 
    path: "{{ pmaker_home }}/state/{{ user_group }}/{{ server_group }}/{{ item }}/.ssh/servers/{{ inventory_hostname }}"
    state: directory
  delegate_to: 127.0.0.1

- name: Check if key should be revoked
  stat: 
    path: "{{ pmaker_home }}/state/{{ user_group }}/{{ server_group }}/{{ item }}/.ssh/{{ keyfile }}.revoke"
  register: revoke_file_check
  delegate_to: 127.0.0.1

- name: Check if key is already revoked
  stat: 
    path: "{{ pmaker_home }}/state/{{ user_group }}/{{ server_group }}/{{ item }}/.ssh/servers/{{ inventory_hostname }}/{{ keyfile }}.revoked"
  register: revoked_file_check
  delegate_to: 127.0.0.1

# - name: check if key revoke is already known at server
#   stat: 
#     path: "{{ pmaker_home }}/state/{{ user_group }}/{{ server_group }}/{{ item }}/.ssh/servers/{{ inventory_hostname }}/{{ keyfile }}.revoke"
#   register: revoke_at_server_file_check

# TODO How about when revoke file oes not exist, but exists at server?

# - name: "DEBUG: revoke_file_check"
#   debug:
#     var: revoke_file_check

# - name: "DEBUG: revoked_file_check"
#   debug:
#     var: revoked_file_check

# - name: "Revoked: {{ pmaker_home }}/state/{{ user_group }}/{{ server_group }}/{{ item }}/.ssh/servers/{{ inventory_hostname }}/{{ keyfile }}.revoked"
#   debug:
#     var: revoked_file_check

- name: Register key to be revoked
  command: cp {{ pmaker_home }}/state/{{ user_group }}/{{ server_group }}/{{ item }}/.ssh/{{ keyfile }}.revoke {{ pmaker_home }}/state/{{ user_group }}/{{ server_group }}/{{ item }}/.ssh/servers/{{ inventory_hostname }}/{{ keyfile }}.revoke
  when: (revoke_file_check.stat.exists == true) and (revoked_file_check.stat.exists == false)
  #(revoke_at_server_file_check.stat.exists == false) 
  delegate_to: 127.0.0.1

#
# check if revoke should be started
#
- name: check if key should be revoked
  stat: 
    path: "{{ pmaker_home }}/state/{{ user_group }}/{{ server_group }}/{{ item }}/.ssh/servers/{{ inventory_hostname }}/{{ keyfile }}.revoke"
  register: revoke_file
  delegate_to: 127.0.0.1

# - name: debug
#   debug:
#     msg: "{{ revoke_file }}"

- name: Ensure pmaker ~/.ssh/authorized_keys contains user's public key
  become: yes
  authorized_key:
    user: "{{ item }}"
    state: absent
    exclusive: no
    manage_dir: yes
    key: "{{ lookup('file', '{{ pmaker_home }}/state/{{ user_group }}/{{ server_group }}/{{ item }}/.ssh/servers/{{ inventory_hostname }}/{{ keyfile }}.revoke') }}"
  register: authorized_keys_result
  when: revoke_file.stat.exists == true

- name: Perform post revoke procedure
  block:
  # - name: debug
  #   debug:
  #     msg: "{{ authorized_keys_result }}"

  - name: Log key revoke at host
    lineinfile:
      line: "{{ date_time }} | {{ inventory_hostname }} | REVOKED | {{ authorized_keys_result.user }} | {{ authorized_keys_result.key }}"
      insertafter: EOF
      dest: "{{ pmaker_home }}/state/{{ user_group }}/{{ server_group }}/{{ item }}/.ssh/registry"
      create: yes
    when: authorized_keys_result.state == 'absent'

  - name: rename revoked key 
    command: mv {{ pmaker_home }}/state/{{ user_group }}/{{ server_group }}/{{ item }}/.ssh/servers/{{ inventory_hostname }}/{{ keyfile }}.revoke {{ pmaker_home }}/state/{{ user_group }}/{{ server_group }}/{{ item }}/.ssh/servers/{{ inventory_hostname }}/{{ keyfile }}.revoked

  - name: Log failed key revoke at host
    lineinfile:
      line: "{{ date_time }} | {{ inventory_hostname }} | REVOKE FAILED | {{ authorized_keys_result.user }} | {{ authorized_keys_result.key }}"
      insertafter: EOF
      dest: "{{ pmaker_home }}/state/{{ user_group }}/{{ server_group }}/{{ item }}/.ssh/registry"
      create: yes
    when: authorized_keys_result is failed

  # - name: Log skipped key revoke at host
  #   lineinfile:
  #     line: "{{ date_time }} | {{ inventory_hostname }} | REVOKE CONFIRMED | {{ authorized_keys_result.user }} | {{ authorized_keys_result.key }}"
  #     insertafter: EOF
  #     dest: "{{ pmaker_home }}/state/{{ user_group }}/{{ server_group }}/{{ item }}/.ssh/registry"
  #     create: yes
  #   when: authorized_keys_result.changed == false

  when: revoke_file.stat.exists == true
  delegate_to: 127.0.0.1


# - name: Protect authorized_keys
#   become: yes
#   file:
#     path: /home/{{ item }}/.ssh/authorized_keys
#     attributes: +i

# - name: Protect .ssh
#   become: yes
#   file:
#     path: /home/{{ item }}/.ssh
#     attributes: +i


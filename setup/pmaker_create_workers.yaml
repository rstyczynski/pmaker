---
- name: Create pmaker user
  become: yes
  user:
    name: "{{ item.username }}"

- name: check if /home/{{ item.username }}/.ssh file exists
  become: yes
  stat: 
    path: /home/{{ item.username }}/.ssh
  register: ssh_available

- name: check if /home/{{ item.username }}/.ssh/authorized_keys file exists
  become: yes
  stat: 
    path: /home/{{ item.username }}/.ssh/authorized_keys
  register: authorized_keys_available

# - name: Protect .ssh
#   become: yes
#   file:
#     path: /home/{{ item.username }}/.ssh
#     attributes: -i
#   when: ssh_available.stat.exists

# - name: Protect authorized_keys
#   become: yes
#   file:
#     path: /home/{{ item.username }}/.ssh/authorized_keys
#     attributes: -i
#   when: authorized_keys_available.stat.exists

- name: Ensure pmaker ~/.ssh/authorized_keys contains pmaker's public key
  become: yes
  authorized_key:
    user: "{{ item.username }}"
    state: present
    exclusive: yes
    manage_dir: yes
    key: "{{ lookup('file', '/opt/{{ item.username }}/.ssh/id_rsa.pub') }}"
  register: authorized_keys_result

#
# log operation 
#
- name: Perform post revoke procedure
  block:
  - name: debug
    debug:
      var: "{{ authorized_keys_result }}"

  - name: Log key registration at host
    lineinfile:
      line: "{{ ansible_date_time.iso8601 }} | {{ inventory_hostname }} | GRANTED | {{ authorized_keys_result.user }} | {{ authorized_keys_result.key }}"
      insertafter: EOF
      dest: "{{ pmaker_home }}/.ssh/registry"
      create: yes
    when: authorized_keys_result.changed == true

  - name: Ensure {{ pmaker_home }}/.ssh/servers/{{ inventory_hostname }} dir exists
    file:
      path: "{{ pmaker_home }}/.ssh/servers/{{ inventory_hostname }}"
      state: directory
    register: server_dir_check

  - name: Register granted key
    command: cp {{ pmaker_home }}/.ssh/id_rsa.pub '{{ pmaker_home }}/.ssh/servers/{{ inventory_hostname }}/id_rsa.pub'
    when: (authorized_keys_result.changed == true) and (server_dir_check.stat.exists == true)

  - name: Log failed key registration at host
    lineinfile:
      line: "{{ ansible_date_time.iso8601 }} | {{ inventory_hostname }} | GRANT FAILED | {{ authorized_keys_result.user }} | {{ authorized_keys_result.key }}"
      insertafter: EOF
      dest: "{{ pmaker_home }}/.ssh/registry"
      create: yes
    when: authorized_keys_result is failed

  - name: Log skipped key registration at host
    lineinfile:
      line: "{{ ansible_date_time.iso8601 }} | {{ inventory_hostname }} | GRANT CONFIRMED | {{ authorized_keys_result.user }} | {{ authorized_keys_result.key }}"
      insertafter: EOF
      dest: "{{ pmaker_home }}/.ssh/registry"
      create: yes
    when: authorized_keys_result.changed == false

  delegate_to: 127.0.0.1


# - name: Protect authorized_keys
#   become: yes
#   file:
#     path: /home/{{ item.username }}/.ssh/authorized_keys
#     attributes: +i

# - name: Protect .ssh
#   become: yes
#   file:
#     path: /home/{{ item.username }}/.ssh
#     attributes: +i
    
- name: Add pmaker to sudo
  become: yes
  lineinfile:
    path: "/etc/sudoers.d/{{ item.username }}"
    line: "{{ item.username }} ALL=(ALL) NOPASSWD: ALL"
    state: present
    mode: 0440
    create: yes
    validate: "visudo -cf %s"

# TOOD move to computer cfg.
- name: remove account limit to use ssh 
  become: yes
  replace:
    path: /etc/ssh/sshd_config
    regexp: '^\s*(AllowUsers.+)$'
    replace: '# \1'
  notify: restart sshd


  
